package com.certificate.tracker;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import com.certificate.tracker.utils.FindKeystores;
import com.certificate.tracker.utils.GetVMArguments;

public class App {

	private static List<String> keystoreFinalList = new ArrayList<String>();
	private final static Logger logger = Logger.getLogger(App.class);
	
	/**
	 * @param args
	 * @throws IOException
	 */
	public static void main(String[] args) {

		/*
		 * Check to see if the log4j properties file is passed as command-line argument.
		 * if not, then check current path and if not present 
		 * then check the certificate-tracker-application.properties file. 
		*/
		if (!GetVMArguments.checkl4j()) {
			/**
			 * @l4jpath - log4j.properties file location.
			 * .
			**/
			String l4jpath = "config/log4j.properties";PropertyConfigurator.configure(l4jpath);
		}
		
		loggerBegin();
		/**
		 * @propertiesFile - certificate-tracker-application.properties file location.
		 * .
		**/
		String propertiesFile = null;
		
		try {
			logger.info("parsing stdin:"+ args[0] +" ...");
			propertiesFile = args[0];
		} catch (ArrayIndexOutOfBoundsException exception) {
			/*
			 * if no user input is given, look for certificate-tracker-application.properties file
			 * in current path.
			 * classified as class path. 
			*/
			logger.info("parsing cp:config.certificate-tracker-application.properties ...");
			propertiesFile = "config/certificate-tracker-application.properties";
		}

		Properties applicationProperties = new Properties();
		
		try {
			applicationProperties.load(new FileInputStream(propertiesFile));
		} catch (FileNotFoundException fnfe) {
			logger.error(fnfe);
			logger.error("file "+propertiesFile+" not found.");
			loggerNonZeroExit(propertiesFile);
		} catch (IOException ioe) {
			logger.error(ioe);
			logger.error("check "+propertiesFile+" permissions.");
			loggerNonZeroExit(propertiesFile);
		}
		
		/**
		 * @rootPath - The starting directory to begin the search.
		 * search is recursive. 
		**/
		String rootPath = applicationProperties
				.getProperty("root.path");
		
		/**
		 * @keystoreTypes - key store types that are searched for under
		 * root path provided.
		**/
		String keystoreTypes = applicationProperties
				.getProperty("keystore.types");
		
		/**
		 * @encFile - The password encrypted file.
		 * Important: this file is generated by EncryptFile.class
		 * please check with @author Shane Reddy for the source code. 
		**/
		String encFile = applicationProperties
				.getProperty("passwords.file");
		
		/**
		 * @outFormat - output format for the results generated.
		 * default is CSV(comma separated values)
		 * this along with @gotCSV decides which class gets called below. 
		**/
		String outFormat = applicationProperties
				.getProperty("output.format");

		/**
		 * @gotCSV - place holder for final output file generation.
		 * default is true.
		 * this along with @outFormat decides which class gets called below. 
		**/
		boolean gotCSV= true;
		
		/**
		 * @outFile - location of the results file.
		**/
		String outFile=null;
		
		if (outFormat != null) {
			if (outFormat.toLowerCase().equals("json")) {
				gotCSV=false;
				outFile = applicationProperties
						.getProperty("json.file");
			} else if (outFormat.toLowerCase().equals("csv")) {
				outFile = applicationProperties
						.getProperty("csv.file");
			} else {
				/*
				 * exit do not proceed.
				*/
				logger.warn("output format not support: "+outFormat);
				loggerNonZeroExit(propertiesFile);
			}
		} else {
			logger.warn("output format not provided.");
			logger.info("defaulting to 'csv' format.");
			outFile = applicationProperties.getProperty("csv.file");			
		}
		
		/*
		 * print certificate-tracker-application.properties values. 
		*/
		logger.info("keystoreTypes :"+keystoreTypes);
		logger.info("rootPath :"+rootPath);
		logger.info("encFile :"+encFile);
		logger.info("outFormat :"+outFormat);
		logger.info("outFile :"+outFile);

		if ((rootPath != null) && (keystoreTypes != null) && (encFile != null)) {

			File rootFile = new File(rootPath);
			
			/*
			 * split the string using ','
			 * allows for multiple options. 
			*/
			final String[] kTypes = keystoreTypes.split(Pattern.quote(","));
			
			for (int iKS=0; iKS<kTypes.length; iKS++) {
				logger.debug("Keystore type selected: " + kTypes[iKS]);
				/*
				 * trims whitespace before calling the class.
				*/
				keystoreFinalList = FindKeystores
						.run(rootFile, 
								kTypes[iKS].trim());
			}
			
			logger.info(keystoreFinalList);
			logger.info("Total keystores found: "+keystoreFinalList.size());
			
			if (!gotCSV) {
				try {
					/*
					 *  CertificateTrackerJSON - class to generate the report in JSON format.
					 *  Parses the key stores and prints the following information for each entry.
					 *  Common Name.
					 *  Serial Number (in Decimal and Hexadecimal)
					 *  Private Key.
					 *  Alias.
					 *  Issuing Authority.
					 *  Validity Period.
					 *  Signature Algorithm (SHA1 or SHA256)
					 *  SAN Entries.
					 *  Chained Certificates.
					*/
					CertificateTrackerJSON.run(keystoreFinalList, encFile, outFile);
				} catch (NullPointerException npe) {
					logger.error("Check the properties file, required values are missing.");
			    	loggerNonZeroExit(propertiesFile);
				}
			} else {
				try {
					/*
					 *  CertificateTrackerCSV - class to generate the report in CSV format.
					 *  Parses the key stores and prints the following information for each entry.
					 *  Common Name.
					 *  Serial Number (in Decimal and Hexadecimal)
					 *  Alias.
					 *  Issuing Authority.
					 *  Validity Period.
					 *  
					 *  TO-DO - match JSON format entries.
					*/
					CertificateTrackerCSV.run(keystoreFinalList, encFile, outFile);
				} catch (NullPointerException npe) {
					logger.error("caught NPE - "+npe);
					logger.error("Check the properties file, required values are missing.");
			    	loggerNonZeroExit(propertiesFile);
				}
			}

        } else {
        	loggerNonZeroExit(propertiesFile);
        }

		logger.info("End Certificate-Tracker App.\n");
	}

	/*
	 * Log and Console pretty print place holders.
	 * loggerBegin
	 * loggerNonZeroExit
	*/
	static void loggerBegin() {
		logger.info("Starting Certificate-Tracker App.");
		if (GetVMArguments.checkl4j()) {
			logger.info("using vmargs:log4j.properties ...");
		} else {
			logger.info("using cp:config.log4j.properties ...");
		}
		GetVMArguments.run();
	}
	
	static void loggerNonZeroExit(String message) {
		logger.info("properties file :"+message);
    	logger.error("Certificate-Tracker App exited with error.\n");
    	System.exit(-9);
	}

}